(function(){"use strict";const h={linear:"x","linear-horizontal":"y",polar:"o",parametric:"t"};for(let e of Array.from(Object.getOwnPropertyNames(Math)))self[e.toLowerCase()]=self[e]=Math[e];self.TAU=self.PI*2,self.osc=(e,r,o="sine")=>r<0?0:o==="sine"?Math.sin(2*Math.PI*e*r):o==="square"?Math.sign(Math.sin(2*Math.PI*e*r)):o==="sawtooth"?2*(r*e-~~(r*e+.5)):o==="triangle"?2*Math.abs(2*(r*e+.25-~~(r*e+.75)))-1:0,self.adsr=(e,r=.2,o=.1,t=.2,l=.2,n=.5)=>e<0?0:e<=r?e/r:e<=r+o?1-(1-n)*(e-r)/o:e<=r+o+t?n:e<=r+o+t+l?n-(n-0)*(e-r-o-t)/l:0,self.__doc__={[self.adsr]:"adsr usage: (x, attack = 0.2, decay = 0.1, sustain = 0.2, release = 0.2, sustainLevel = 0.5)",[self.osc]:"osc usage: (freq, x, type = sine|square|sawtooth|triangle)",[self.abs]:"Returns the absolute value of x.",[self.acos]:"Returns the arccosine of x.",[self.acosh]:"Returns the hyperbolic arccosine of x.",[self.asin]:"Returns the arcsine of x.",[self.asinh]:"Returns the hyperbolic arcsine of a number.",[self.atan]:"Returns the arctangent of x.",[self.atanh]:"Returns the hyperbolic arctangent of x.",[self.atan2]:"Returns the arctangent of the quotient of its arguments.",[self.cbrt]:"Returns the cube root of x.",[self.ceil]:"Returns the smallest integer greater than or equal to x.",[self.clz32]:"Returns the number of leading zero bits of the 32-bit integer x.",[self.cos]:"Returns the cosine of x.",[self.cosh]:"Returns the hyperbolic cosine of x.",[self.exp]:"Returns ex, where x is the argument, and e is Euler's constant (2.718\u2026, the base of the natural logarithm).",[self.expm1]:"Returns subtracting 1 from exp(x).",[self.floor]:"Returns the largest integer less than or equal to x.",[self.fround]:"Returns the nearest single precision float representation of x.",[self.hypot]:"Returns the square root of the sum of squares of its arguments.",[self.imul]:"Returns the result of the 32-bit integer multiplication of x and y.",[self.log]:"Returns the natural logarithm (\u33D2e; also, \u33D1) of x.",[self.log1p]:"Returns the natural logarithm (\u33D2e; also \u33D1) of 1 + x for the number x.",[self.log10]:"Returns the base-10 logarithm of x.",[self.log2]:"Returns the base-2 logarithm of x.",[self.max]:"Returns the largest of zero or more numbers.",[self.min]:"Returns the smallest of zero or more numbers.",[self.pow]:"Returns base x to the exponent power y (that is, xy).",[self.random]:"Returns a pseudo-random number between 0 and 1.",[self.round]:"Returns the value of the number x rounded to the nearest integer.",[self.sign]:"Returns the sign of the x, indicating whether x is positive, negative, or zero.",[self.sin]:"Returns the sine of x.",[self.sinh]:"Returns the hyperbolic sine of x.",[self.sqrt]:"Returns the positive square root of x.",[self.tan]:"Returns the tangent of x.",[self.tanh]:"Returns the hyperbolic tangent of x.",[self.trunc]:"Returns the integer portion of x, removing any fractional digits."},onmessage=({data:{index:e,funs:r,type:o,values:t,dimensions:l=2}})=>{let n="",u=[0];try{const a=r.map(s=>new Function(h[o],"return "+s));for(let s=0;s<t.length;s+=l){const f=t[s];if(l===1){if(t[s]=a[0](f),typeof t[s]!="number"){let i;throw typeof t[s]=="function"?i=new Error(self.__doc__[t[s]]||"Function not supported"):i=new Error(`${typeof t[s]} is not a number`),t[s]=null,i}}else o==="parametric"?(t[s]=a[0](f),t[s+1]=a[1](f)):(t[s]=f,t[s+1]=a[0](f),o==="polar"&&(t[s]=t[s+1]*Math.cos(f),t[s+1]*=Math.sin(f)))}}catch(a){n=a}postMessage({index:e,values:t,type:o,skips:u,err:n})}})();
