(function(){"use strict";const M={linear:"x","linear-horizontal":"y",polar:"o",parametric:"t"};for(let n of Array.from(Object.getOwnPropertyNames(Math)))self[n.toLowerCase()]=self[n]=Math[n];self.TAU=self.PI*2,self.osc=(n,s,r="sine")=>s<0?0:r==="sine"?Math.sin(2*Math.PI*n*s):r==="square"?Math.sign(Math.sin(2*Math.PI*n*s)):r==="sawtooth"?2*(s*n-~~(s*n+.5)):r==="triangle"?2*Math.abs(2*(s*n+.25-~~(s*n+.75)))-1:0,self.adsr=(n,s=.2,r=.1,f=.4,a=.3,l=.5)=>n<0?0:n<=s?n/s:n<=s+r?1-(1-l)*(n-s)/r:n<=s+r+f?l:n<=s+r+f+a?l-(l-0)*(n-s-r-f)/a:0,self.__doc__={[self.adsr]:"adsr usage: (x, attack = 0.2, decay = 0.1, sustain = 0.4, release = 0.3, sustainLevel = 0.5)",[self.osc]:"osc usage: (freq, x, type = sine|square|sawtooth|triangle)",[self.abs]:"Returns the absolute value of x.",[self.acos]:"Returns the arccosine of x.",[self.acosh]:"Returns the hyperbolic arccosine of x.",[self.asin]:"Returns the arcsine of x.",[self.asinh]:"Returns the hyperbolic arcsine of a number.",[self.atan]:"Returns the arctangent of x.",[self.atanh]:"Returns the hyperbolic arctangent of x.",[self.atan2]:"Returns the arctangent of the quotient of its arguments.",[self.cbrt]:"Returns the cube root of x.",[self.ceil]:"Returns the smallest integer greater than or equal to x.",[self.clz32]:"Returns the number of leading zero bits of the 32-bit integer x.",[self.cos]:"Returns the cosine of x.",[self.cosh]:"Returns the hyperbolic cosine of x.",[self.exp]:"Returns ex, where x is the argument, and e is Euler's constant (2.718\u2026, the base of the natural logarithm).",[self.expm1]:"Returns subtracting 1 from exp(x).",[self.floor]:"Returns the largest integer less than or equal to x.",[self.fround]:"Returns the nearest single precision float representation of x.",[self.hypot]:"Returns the square root of the sum of squares of its arguments.",[self.imul]:"Returns the result of the 32-bit integer multiplication of x and y.",[self.log]:"Returns the natural logarithm (\u33D2e; also, \u33D1) of x.",[self.log1p]:"Returns the natural logarithm (\u33D2e; also \u33D1) of 1 + x for the number x.",[self.log10]:"Returns the base-10 logarithm of x.",[self.log2]:"Returns the base-2 logarithm of x.",[self.max]:"Returns the largest of zero or more numbers.",[self.min]:"Returns the smallest of zero or more numbers.",[self.pow]:"Returns base x to the exponent power y (that is, xy).",[self.random]:"Returns a pseudo-random number between 0 and 1.",[self.round]:"Returns the value of the number x rounded to the nearest integer.",[self.sign]:"Returns the sign of the x, indicating whether x is positive, negative, or zero.",[self.sin]:"Returns the sine of x.",[self.sinh]:"Returns the hyperbolic sine of x.",[self.sqrt]:"Returns the positive square root of x.",[self.tan]:"Returns the tangent of x.",[self.tanh]:"Returns the hyperbolic tangent of x.",[self.trunc]:"Returns the integer portion of x, removing any fractional digits."};const b={};onmessage=({data:{index:n,funs:s,type:r,min:f,max:a,step:l,region:E,affects:g,recs:m,dimensions:v=2,uuid:_}})=>{let w="",p=[];try{if(r==="unknown")throw new Error(`Unknow function type ${s.join(", ")}`);if(typeof f=="string"&&(f=new Function("return "+f)()),typeof a=="string"&&(a=new Function("return "+a)()),typeof l=="string"&&(l=new Function("return "+l)()),l=(a-f)*l,l<1e-9)throw new Error(`Invalid step ${l}`);for(let e=0;e<g.length;e++){const[t,o]=g[e],u=new Function("","return "+o)();b[t]=self[t],self[t]=u}m&&Object.entries(m).forEach(([e,t])=>{!t||(self[`$rec${e}`]=o=>{const u=~~Math.round(o*t.sampleRate);return u>=0&&u<t.buffer.length?t.buffer[u]:0})});const[[c,$],[z,F]]=E;let x=null,y=null,R=!0;const d=[];let i=[];const h=s.map(e=>new Function(M[r],"return "+e));for(let e=f;e<a;e+=l)if(v===1){const t=h[0](e);if(typeof t!="number"){let o;throw typeof t=="function"?o=new Error(self.__doc__[t]||"Function not supported"):typeof t>"u"?o=new Error(`${s[0]} is undefined`):o=new Error(`${typeof t} is not a number`),o}i.push(t)}else{let t,o;if(r==="parametric")t=h[0](e),o=h[1](e);else if(r==="polar"){const u=h[0](e);t=u*Math.cos(e),o=u*Math.sin(e)}else r==="linear-horizontal"?(t=h[0](e),o=e):(t=e,o=h[0](e));if(t<c||t>$||o<z||o>F){if(x=t,y=o,R)continue;R=!0}else R&&(R=!1,i.length&&(d.push(i),i=[]),x!==null&&i.push(x,y));i.push(t,o)}i.length&&d.push(i),p=d.map(e=>new Float32Array(e)),m&&Object.keys(m).forEach(e=>{delete self[`$rec${e}`]});for(let e=0;e<g.length;e++){const[t]=g[e];self[t]=b[t],delete b[t]}}catch(c){w=c}postMessage({index:n,values:p,type:r,err:w,uuid:_},p.map(c=>c.buffer))}})();
